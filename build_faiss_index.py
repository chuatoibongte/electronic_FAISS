import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
from pymongo import MongoClient
from dotenv import load_dotenv
import os
import clip
import torch
from utils import build_description_concat, get_mean_image_embedding
from bson import ObjectId

# ========== C√ÄI ƒê·∫∂T ==========
DIM_TEXT = 768
MODEL_NAME_TEXT = 'intfloat/multilingual-e5-base'
MODEL_NAME_IMAGE = "ViT-B/32"
DIM_IMAGE = 512  # ViT-B/32

load_dotenv()
MONGO_URI = os.environ.get("MONGO_URI")
client = MongoClient(MONGO_URI)
db = client['ElectronicMaster_DB']
collection = db['electronics']
docs = list(collection.find({}))

# ========== LOAD MODELS ==========
print("üîπ ƒêang load model...")
text_model = SentenceTransformer(MODEL_NAME_TEXT)
clip_model, preprocess = clip.load(MODEL_NAME_IMAGE, device="cpu")

# ========== B·∫ÆT ƒê·∫¶U BUILD ==========
mongo_ids = []
text_embeddings = []
image_embeddings = []
failed_ids = []

print("üîπ Duy·ªát t·ª´ng s·∫£n ph·∫©m (build l·∫ßn 1)...")
for doc in docs:
    # 1. L·∫•y embedding image tr∆∞·ªõc
    image_urls = [img['url'] for img in doc.get('electronicImgs', []) if img.get('url')]
    mean_vec = get_mean_image_embedding(image_urls, clip_model, preprocess)
    if mean_vec is None:
        print(f"‚ö†Ô∏è B·ªè qua doc {doc.get('_id')} (kh√¥ng c√≥ image h·ª£p l·ªá, s·∫Ω retry sau)")
        failed_ids.append(str(doc.get('_id')))
        continue

    # 2. N·∫øu c√≥ ·∫£nh h·ª£p l·ªá, l·∫•y embedding text
    description_concat = build_description_concat(doc)
    text_emb = text_model.encode("passage: " + description_concat, normalize_embeddings=True)

    # 3. L∆∞u v√†o list
    mongo_ids.append(str(doc['_id']))
    image_embeddings.append(mean_vec)
    text_embeddings.append(text_emb)

print(f"‚úÖ T·ªïng s·ªë s·∫£n ph·∫©m index b√¨nh th∆∞·ªùng: {len(mongo_ids)}")
print(f"üîÅ S·ªë s·∫£n ph·∫©m c·∫ßn retry (ghi ra failed_image_ids.txt): {len(failed_ids)}")

# Ghi danh s√°ch failed ids ra file
with open('failed_image_ids.txt', 'w', encoding='utf-8') as f:
    for _id in failed_ids:
        f.write(_id + '\n')

# ========== B·∫ÆT ƒê·∫¶U RETRY C·ª®U ·∫¢NH CHO FAILED IDS ==========
retry_success = 0
for failed_id in failed_ids:
    doc = collection.find_one({'_id': ObjectId(failed_id)})
    if doc is None:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y doc {failed_id}")
        continue

    image_urls = [img['url'] for img in doc.get('electronicImgs', []) if img.get('url')]
    mean_vec = None
    # Th·ª≠ t·ªëi ƒëa 5 l·∫ßn
    for attempt in range(5):
        mean_vec = get_mean_image_embedding(image_urls, clip_model, preprocess)
        if mean_vec is not None:
            print(f"‚úÖ ƒê√£ c·ª©u th√†nh c√¥ng ·∫£nh cho s·∫£n ph·∫©m {failed_id} ·ªü l·∫ßn th·ª≠ {attempt+1}!")
            break
        else:
            print(f"‚è≥ Th·ª≠ l·∫°i l·∫ßn {attempt+1} cho s·∫£n ph·∫©m {failed_id}...")

    if mean_vec is not None:
        description_concat = build_description_concat(doc)
        text_emb = text_model.encode("passage: " + description_concat, normalize_embeddings=True)
        mongo_ids.append(str(doc['_id']))
        image_embeddings.append(mean_vec)
        text_embeddings.append(text_emb)
        retry_success += 1
    else:
        print(f"‚õîÔ∏è Th·ª≠ 5 l·∫ßn v·∫´n kh√¥ng l·∫•y ƒë∆∞·ª£c ·∫£nh cho {failed_id}. B·ªè qua lu√¥n!")

print(f"‚úÖ ƒê√£ c·ª©u th√†nh c√¥ng th√™m {retry_success} s·∫£n ph·∫©m c√≥ ·∫£nh l·ªói!")

# ========== BUILD FAISS INDEX & L∆ØU ==========
if text_embeddings and image_embeddings:
    text_embeddings = np.array(text_embeddings, dtype='float32')
    image_embeddings = np.array(image_embeddings, dtype='float32')

    index_text = faiss.IndexFlatIP(text_embeddings.shape[1])
    index_img = faiss.IndexFlatIP(image_embeddings.shape[1])
    index_text.add(text_embeddings)
    index_img.add(image_embeddings)

    faiss.write_index(index_text, 'faiss_index.bin')
    faiss.write_index(index_img, 'faiss_index_image.bin')

    with open('faiss_id_map.txt', 'w', encoding='utf-8') as f:
        for _id in mongo_ids:
            f.write(_id + '\n')

    print("üéâ ƒê√£ build xong index v√† mapping ƒë·ªìng b·ªô cho c·∫£ text v√† image!")
else:
    print("‚ùå Kh√¥ng ƒë·ªß s·∫£n ph·∫©m ƒë·ªÉ build index (ki·ªÉm tra l·∫°i d·ªØ li·ªáu ho·∫∑c pipeline)")

# ========== K·∫æT TH√öC ==========
print(f"T·ªïng s·ªë vector text: {len(text_embeddings)}")
print(f"T·ªïng s·ªë vector image: {len(image_embeddings)}")
print("‚úÖ Pipeline ƒë√£ ho√†n t·∫•t.")
